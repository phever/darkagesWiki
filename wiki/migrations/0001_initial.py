# Generated by Django 5.2.2 on 2025-06-07 02:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Article",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("last_edited", models.DateTimeField(auto_now=True)),
                ("published", models.BooleanField(default=False)),
                ("approved", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Stats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "offense",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("F", "Fire"),
                            ("W", "Water"),
                            ("A", "Wind"),
                            ("E", "Earth"),
                            ("L", "Light"),
                            ("D", "Dark"),
                            ("M", "Metal"),
                            ("N", "Nature"),
                        ],
                        default=None,
                        max_length=1,
                        null=True,
                    ),
                ),
                (
                    "defense",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("F", "Fire"),
                            ("W", "Water"),
                            ("A", "Wind"),
                            ("E", "Earth"),
                            ("L", "Light"),
                            ("D", "Dark"),
                            ("M", "Metal"),
                            ("N", "Nature"),
                        ],
                        default=None,
                        max_length=1,
                        null=True,
                    ),
                ),
                ("armor_class", models.SmallIntegerField(default=0)),
                ("strength", models.SmallIntegerField(default=0)),
                ("constitution", models.SmallIntegerField(default=0)),
                ("wisdom", models.SmallIntegerField(default=0)),
                ("intelligence", models.SmallIntegerField(default=0)),
                ("dexterity", models.SmallIntegerField(default=0)),
                ("regen", models.SmallIntegerField(default=0)),
                ("health", models.IntegerField(default=0)),
                ("mana", models.IntegerField(default=0)),
                ("hit", models.SmallIntegerField(default=0)),
                ("damage", models.SmallIntegerField(default=0)),
                ("magic_resist_percent", models.SmallIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("dark_ages_username", models.CharField(blank=True, max_length=255)),
                ("discord_handle", models.CharField(blank=True, max_length=255)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Item",
            fields=[
                (
                    "article_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wiki.article",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("TR", "Trinket"),
                            ("MD", "Monster Drop"),
                            ("FO", "Food"),
                            ("FL", "Flower"),
                            ("HE", "Herbalism"),
                            ("PO", "Potion"),
                            ("LO", "Loot Box"),
                            ("EQ", "Equipment"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        upload_to="static/images/item/<django.db.models.fields.CharField>"
                    ),
                ),
                ("is_stackable", models.BooleanField(default=False)),
                (
                    "stack_size",
                    models.PositiveIntegerField(blank=True, default=None, null=True),
                ),
                ("effect", models.TextField(blank=True, default=None, null=True)),
                (
                    "unidentified_name",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
            ],
            bases=("wiki.article",),
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "article_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wiki.article",
                    ),
                ),
            ],
            bases=("wiki.article",),
        ),
        migrations.CreateModel(
            name="SkillSpell",
            fields=[
                (
                    "article_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wiki.article",
                    ),
                ),
                (
                    "spell_type",
                    models.CharField(
                        choices=[
                            ("TS", "Temuair Skill [s]"),
                            ("MS", "Medenia Skill [S]"),
                            ("TD", "Temuair Spell [d]"),
                            ("MD", "Medenia Spell [D]"),
                            ("GS", "Extra Skill [g]"),
                            ("GD", "Extra Spell [g]"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "learned_by",
                    models.CharField(
                        choices=[
                            ("PE", "Peasant"),
                            ("WA", "Warrior"),
                            ("RO", "Rogue"),
                            ("WI", "Wizard"),
                            ("PR", "Priest"),
                            ("MO", "Monk"),
                            ("GL", "Gladiator"),
                            ("AR", "Archer"),
                            ("SU", "Summoner"),
                            ("BA", "Bard"),
                            ("DR", "Druid"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "image",
                    models.ImageField(upload_to="static/images/skills_and_spells"),
                ),
                (
                    "minimum_level",
                    models.PositiveSmallIntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(199),
                        ],
                    ),
                ),
                ("required_strength", models.SmallIntegerField(default=0)),
                ("required_constitution", models.SmallIntegerField(default=0)),
                ("required_wisdom", models.SmallIntegerField(default=0)),
                ("required_intelligence", models.SmallIntegerField(default=0)),
                ("required_dexterity", models.SmallIntegerField(default=0)),
                ("cooldown", models.SmallIntegerField(default=0)),
                ("lines", models.SmallIntegerField(default=0)),
                ("mana_cost", models.SmallIntegerField(default=0)),
                ("description", models.TextField()),
            ],
            bases=("wiki.article",),
        ),
        migrations.AddField(
            model_name="article",
            name="approved_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="approved_articles",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="article",
            name="author",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="articles",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Equipment",
            fields=[
                (
                    "item_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wiki.item",
                    ),
                ),
                (
                    "slot",
                    models.CharField(
                        choices=[
                            ("AC", "Accessory"),
                            ("BE", "Belt"),
                            ("BO", "Boots"),
                            ("EA", "Earrings"),
                            ("GA", "Gauntlet"),
                            ("GR", "Greaves"),
                            ("HA", "Hat"),
                            ("HE", "Helmet"),
                            ("NE", "Necklace"),
                            ("RI", "Ring"),
                            ("SH", "Shield"),
                            ("WE", "Weapon"),
                            ("OV", "Overcoat"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "minimum_level",
                    models.PositiveSmallIntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(199),
                        ],
                    ),
                ),
                (
                    "wearable_by_gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female"), ("B", "Both")],
                        max_length=1,
                    ),
                ),
                (
                    "wearable_by_class",
                    models.CharField(
                        choices=[
                            ("PE", "Peasant"),
                            ("WA", "Warrior"),
                            ("RO", "Rogue"),
                            ("WI", "Wizard"),
                            ("PR", "Priest"),
                            ("MO", "Monk"),
                            ("GL", "Gladiator"),
                            ("AR", "Archer"),
                            ("SU", "Summoner"),
                            ("BA", "Bard"),
                            ("DR", "Druid"),
                        ],
                        max_length=2,
                    ),
                ),
                ("gold_value", models.PositiveIntegerField(default=0)),
                ("durability", models.PositiveIntegerField(default=0)),
                ("weight", models.PositiveSmallIntegerField(default=1)),
                ("armor_class", models.PositiveSmallIntegerField(default=0)),
                ("is_enchantable", models.BooleanField(default=False)),
                ("is_skin", models.BooleanField(default=False)),
                ("is_perishable", models.BooleanField(default=False)),
                ("notes", models.TextField(blank=True, default=None, null=True)),
            ],
            bases=("wiki.item",),
        ),
        migrations.CreateModel(
            name="Map",
            fields=[
                (
                    "article_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wiki.article",
                    ),
                ),
                ("floor_a", models.PositiveSmallIntegerField(default=1)),
                ("floor_b", models.PositiveSmallIntegerField(default=1)),
                (
                    "area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="wiki.location"
                    ),
                ),
            ],
            bases=("wiki.article",),
        ),
        migrations.CreateModel(
            name="Quest",
            fields=[
                (
                    "article_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wiki.article",
                    ),
                ),
                (
                    "minimum_level",
                    models.PositiveSmallIntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(199),
                        ],
                    ),
                ),
                (
                    "maximum_level",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        default=None,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(199),
                        ],
                    ),
                ),
                (
                    "repeatable",
                    models.PositiveIntegerField(
                        default=0, help_text="Repeatable every n hours"
                    ),
                ),
                (
                    "quest_start",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="wiki.location"
                    ),
                ),
                (
                    "required_items",
                    models.ManyToManyField(
                        related_name="quest_required_items", to="wiki.article"
                    ),
                ),
                (
                    "rewards",
                    models.ManyToManyField(
                        related_name="quest_rewards", to="wiki.article"
                    ),
                ),
            ],
            bases=("wiki.article",),
        ),
        migrations.CreateModel(
            name="QuestStep",
            fields=[
                (
                    "article_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wiki.article",
                    ),
                ),
                ("order", models.SmallIntegerField()),
                ("header", models.CharField(max_length=255)),
                ("body", models.TextField()),
                (
                    "related_quest",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="wiki.quest"
                    ),
                ),
            ],
            bases=("wiki.article",),
        ),
        migrations.CreateModel(
            name="SkillSpellRequirements",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "minimum_level",
                    models.PositiveSmallIntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(199),
                        ],
                    ),
                ),
                (
                    "linked_ability",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wiki.skillspell",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ItemRequirements",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "linked_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="wiki.item"
                    ),
                ),
                (
                    "linked_ability",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wiki.skillspell",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Armor",
            fields=[
                (
                    "equipment_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wiki.equipment",
                    ),
                ),
                ("is_tailorable", models.BooleanField(default=False)),
                ("is_dyeable", models.BooleanField(default=False)),
            ],
            bases=("wiki.equipment",),
        ),
        migrations.CreateModel(
            name="Weapon",
            fields=[
                (
                    "equipment_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wiki.equipment",
                    ),
                ),
                ("is_two_handed", models.BooleanField(default=False)),
                ("is_smithable", models.BooleanField(default=False)),
                ("damage_small_minimum", models.PositiveSmallIntegerField(default=1)),
                ("damage_small_maximum", models.PositiveSmallIntegerField(default=1)),
                ("damage_large_minimum", models.PositiveSmallIntegerField(default=1)),
                ("damage_large_maximum", models.PositiveSmallIntegerField(default=1)),
            ],
            bases=("wiki.equipment",),
        ),
        migrations.AddField(
            model_name="equipment",
            name="location",
            field=models.ManyToManyField(blank=True, default=None, to="wiki.map"),
        ),
        migrations.AddField(
            model_name="equipment",
            name="stats",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="wiki.stats",
            ),
        ),
    ]
